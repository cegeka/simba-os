//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ConditionService_findAll_args = function(args) {
};
ConditionService_findAll_args.prototype = {};
ConditionService_findAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_findAll_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_findAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_findAll_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TCondition]);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_findAll_result.prototype = {};
ConditionService_findAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.success = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = new TCondition();
          elem204.read(input);
          this.success.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_findAll_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_findAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter205 in this.success)
    {
      if (this.success.hasOwnProperty(iter205))
      {
        iter205 = this.success[iter205];
        iter205.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_findPolicies_args = function(args) {
  this.condition = null;
  if (args) {
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new TCondition(args.condition);
    }
  }
};
ConditionService_findPolicies_args.prototype = {};
ConditionService_findPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new TCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_findPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_findPolicies_args');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_findPolicies_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TPolicy]);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_findPolicies_result.prototype = {};
ConditionService_findPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.success = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = new TPolicy();
          elem212.read(input);
          this.success.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_findPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_findPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter213 in this.success)
    {
      if (this.success.hasOwnProperty(iter213))
      {
        iter213 = this.success[iter213];
        iter213.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_findExemptedUsers_args = function(args) {
  this.condition = null;
  if (args) {
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new TCondition(args.condition);
    }
  }
};
ConditionService_findExemptedUsers_args.prototype = {};
ConditionService_findExemptedUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new TCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_findExemptedUsers_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_findExemptedUsers_args');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_findExemptedUsers_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TUser]);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_findExemptedUsers_result.prototype = {};
ConditionService_findExemptedUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.success = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = new TUser();
          elem220.read(input);
          this.success.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_findExemptedUsers_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_findExemptedUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter221 in this.success)
    {
      if (this.success.hasOwnProperty(iter221))
      {
        iter221 = this.success[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_refresh_args = function(args) {
  this.condition = null;
  if (args) {
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new TCondition(args.condition);
    }
  }
};
ConditionService_refresh_args.prototype = {};
ConditionService_refresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new TCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_refresh_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_refresh_args');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, -1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_refresh_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TCondition(args.success);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_refresh_result.prototype = {};
ConditionService_refresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TCondition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_refresh_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_refresh_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_addOrUpdate_args = function(args) {
  this.condition = null;
  this.policies = null;
  this.excludedUsers = null;
  if (args) {
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new TCondition(args.condition);
    }
    if (args.policies !== undefined && args.policies !== null) {
      this.policies = Thrift.copyList(args.policies, [TPolicy]);
    }
    if (args.excludedUsers !== undefined && args.excludedUsers !== null) {
      this.excludedUsers = Thrift.copyList(args.excludedUsers, [TUser]);
    }
  }
};
ConditionService_addOrUpdate_args.prototype = {};
ConditionService_addOrUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new TCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size222 = 0;
        var _rtmp3226;
        this.policies = [];
        var _etype225 = 0;
        _rtmp3226 = input.readListBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = new TPolicy();
          elem228.read(input);
          this.policies.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size229 = 0;
        var _rtmp3233;
        this.excludedUsers = [];
        var _etype232 = 0;
        _rtmp3233 = input.readListBegin();
        _etype232 = _rtmp3233.etype;
        _size229 = _rtmp3233.size;
        for (var _i234 = 0; _i234 < _size229; ++_i234)
        {
          var elem235 = null;
          elem235 = new TUser();
          elem235.read(input);
          this.excludedUsers.push(elem235);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_addOrUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_addOrUpdate_args');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  if (this.policies !== null && this.policies !== undefined) {
    output.writeFieldBegin('policies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.policies.length);
    for (var iter236 in this.policies)
    {
      if (this.policies.hasOwnProperty(iter236))
      {
        iter236 = this.policies[iter236];
        iter236.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.excludedUsers !== null && this.excludedUsers !== undefined) {
    output.writeFieldBegin('excludedUsers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.excludedUsers.length);
    for (var iter237 in this.excludedUsers)
    {
      if (this.excludedUsers.hasOwnProperty(iter237))
      {
        iter237 = this.excludedUsers[iter237];
        iter237.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_addOrUpdate_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TCondition(args.success);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_addOrUpdate_result.prototype = {};
ConditionService_addOrUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TCondition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_addOrUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_addOrUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_remove_args = function(args) {
  this.condition = null;
  if (args) {
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new TCondition(args.condition);
    }
  }
};
ConditionService_remove_args.prototype = {};
ConditionService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new TCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_remove_args');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_remove_result = function(args) {
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_remove_result.prototype = {};
ConditionService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_remove_result');
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_validateTimeCondition_args = function(args) {
  this.condition = null;
  if (args) {
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new TCondition(args.condition);
    }
  }
};
ConditionService_validateTimeCondition_args.prototype = {};
ConditionService_validateTimeCondition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new TCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_validateTimeCondition_args.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_validateTimeCondition_args');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionService_validateTimeCondition_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
ConditionService_validateTimeCondition_result.prototype = {};
ConditionService_validateTimeCondition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionService_validateTimeCondition_result.prototype.write = function(output) {
  output.writeStructBegin('ConditionService_validateTimeCondition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ConditionServiceClient.prototype = {};
ConditionServiceClient.prototype.findAll = function(callback) {
  this.send_findAll(callback); 
  if (!callback) {
    return this.recv_findAll();
  }
};

ConditionServiceClient.prototype.send_findAll = function(callback) {
  this.output.writeMessageBegin('findAll', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_findAll_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAll();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_findAll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_findAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAll failed: unknown result';
};
ConditionServiceClient.prototype.findPolicies = function(condition, callback) {
  this.send_findPolicies(condition, callback); 
  if (!callback) {
    return this.recv_findPolicies();
  }
};

ConditionServiceClient.prototype.send_findPolicies = function(condition, callback) {
  this.output.writeMessageBegin('findPolicies', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_findPolicies_args();
  args.condition = condition;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findPolicies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_findPolicies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_findPolicies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findPolicies failed: unknown result';
};
ConditionServiceClient.prototype.findExemptedUsers = function(condition, callback) {
  this.send_findExemptedUsers(condition, callback); 
  if (!callback) {
    return this.recv_findExemptedUsers();
  }
};

ConditionServiceClient.prototype.send_findExemptedUsers = function(condition, callback) {
  this.output.writeMessageBegin('findExemptedUsers', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_findExemptedUsers_args();
  args.condition = condition;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findExemptedUsers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_findExemptedUsers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_findExemptedUsers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findExemptedUsers failed: unknown result';
};
ConditionServiceClient.prototype.refresh = function(condition, callback) {
  this.send_refresh(condition, callback); 
  if (!callback) {
    return this.recv_refresh();
  }
};

ConditionServiceClient.prototype.send_refresh = function(condition, callback) {
  this.output.writeMessageBegin('refresh', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_refresh_args();
  args.condition = condition;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_refresh();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_refresh = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_refresh_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'refresh failed: unknown result';
};
ConditionServiceClient.prototype.addOrUpdate = function(condition, policies, excludedUsers, callback) {
  this.send_addOrUpdate(condition, policies, excludedUsers, callback); 
  if (!callback) {
    return this.recv_addOrUpdate();
  }
};

ConditionServiceClient.prototype.send_addOrUpdate = function(condition, policies, excludedUsers, callback) {
  this.output.writeMessageBegin('addOrUpdate', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_addOrUpdate_args();
  args.condition = condition;
  args.policies = policies;
  args.excludedUsers = excludedUsers;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addOrUpdate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_addOrUpdate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_addOrUpdate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addOrUpdate failed: unknown result';
};
ConditionServiceClient.prototype.remove = function(condition, callback) {
  this.send_remove(condition, callback); 
  if (!callback) {
  this.recv_remove();
  }
};

ConditionServiceClient.prototype.send_remove = function(condition, callback) {
  this.output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_remove_args();
  args.condition = condition;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_remove();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_remove = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_remove_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  return;
};
ConditionServiceClient.prototype.validateTimeCondition = function(condition, callback) {
  this.send_validateTimeCondition(condition, callback); 
  if (!callback) {
    return this.recv_validateTimeCondition();
  }
};

ConditionServiceClient.prototype.send_validateTimeCondition = function(condition, callback) {
  this.output.writeMessageBegin('validateTimeCondition', Thrift.MessageType.CALL, this.seqid);
  var args = new ConditionService_validateTimeCondition_args();
  args.condition = condition;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_validateTimeCondition();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ConditionServiceClient.prototype.recv_validateTimeCondition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ConditionService_validateTimeCondition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'validateTimeCondition failed: unknown result';
};
