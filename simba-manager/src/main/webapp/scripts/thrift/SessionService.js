//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SessionService_findAllActive_args = function(args) {
};
SessionService_findAllActive_args.prototype = {};
SessionService_findAllActive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_findAllActive_args.prototype.write = function(output) {
  output.writeStructBegin('SessionService_findAllActive_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_findAllActive_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TSession]);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
SessionService_findAllActive_result.prototype = {};
SessionService_findAllActive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.success = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new TSession();
          elem92.read(input);
          this.success.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_findAllActive_result.prototype.write = function(output) {
  output.writeStructBegin('SessionService_findAllActive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter93 in this.success)
    {
      if (this.success.hasOwnProperty(iter93))
      {
        iter93 = this.success[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_remove_args = function(args) {
  this.ssoToken = null;
  if (args) {
    if (args.ssoToken !== undefined && args.ssoToken !== null) {
      this.ssoToken = args.ssoToken;
    }
  }
};
SessionService_remove_args.prototype = {};
SessionService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssoToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('SessionService_remove_args');
  if (this.ssoToken !== null && this.ssoToken !== undefined) {
    output.writeFieldBegin('ssoToken', Thrift.Type.STRING, 1);
    output.writeString(this.ssoToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_remove_result = function(args) {
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
SessionService_remove_result.prototype = {};
SessionService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('SessionService_remove_result');
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_removeAllBut_args = function(args) {
  this.ssoToken = null;
  if (args) {
    if (args.ssoToken !== undefined && args.ssoToken !== null) {
      this.ssoToken = args.ssoToken;
    }
  }
};
SessionService_removeAllBut_args.prototype = {};
SessionService_removeAllBut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssoToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_removeAllBut_args.prototype.write = function(output) {
  output.writeStructBegin('SessionService_removeAllBut_args');
  if (this.ssoToken !== null && this.ssoToken !== undefined) {
    output.writeFieldBegin('ssoToken', Thrift.Type.STRING, 1);
    output.writeString(this.ssoToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_removeAllBut_result = function(args) {
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
SessionService_removeAllBut_result.prototype = {};
SessionService_removeAllBut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_removeAllBut_result.prototype.write = function(output) {
  output.writeStructBegin('SessionService_removeAllBut_result');
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_getUserFor_args = function(args) {
  this.ssoToken = null;
  if (args) {
    if (args.ssoToken !== undefined && args.ssoToken !== null) {
      this.ssoToken = args.ssoToken;
    }
  }
};
SessionService_getUserFor_args.prototype = {};
SessionService_getUserFor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssoToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_getUserFor_args.prototype.write = function(output) {
  output.writeStructBegin('SessionService_getUserFor_args');
  if (this.ssoToken !== null && this.ssoToken !== undefined) {
    output.writeFieldBegin('ssoToken', Thrift.Type.STRING, 1);
    output.writeString(this.ssoToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionService_getUserFor_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
SessionService_getUserFor_result.prototype = {};
SessionService_getUserFor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionService_getUserFor_result.prototype.write = function(output) {
  output.writeStructBegin('SessionService_getUserFor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SessionServiceClient.prototype = {};
SessionServiceClient.prototype.findAllActive = function(callback) {
  this.send_findAllActive(callback); 
  if (!callback) {
    return this.recv_findAllActive();
  }
};

SessionServiceClient.prototype.send_findAllActive = function(callback) {
  this.output.writeMessageBegin('findAllActive', Thrift.MessageType.CALL, this.seqid);
  var args = new SessionService_findAllActive_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAllActive();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SessionServiceClient.prototype.recv_findAllActive = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionService_findAllActive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAllActive failed: unknown result';
};
SessionServiceClient.prototype.remove = function(ssoToken, callback) {
  this.send_remove(ssoToken, callback); 
  if (!callback) {
  this.recv_remove();
  }
};

SessionServiceClient.prototype.send_remove = function(ssoToken, callback) {
  this.output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new SessionService_remove_args();
  args.ssoToken = ssoToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_remove();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SessionServiceClient.prototype.recv_remove = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionService_remove_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  return;
};
SessionServiceClient.prototype.removeAllBut = function(ssoToken, callback) {
  this.send_removeAllBut(ssoToken, callback); 
  if (!callback) {
  this.recv_removeAllBut();
  }
};

SessionServiceClient.prototype.send_removeAllBut = function(ssoToken, callback) {
  this.output.writeMessageBegin('removeAllBut', Thrift.MessageType.CALL, this.seqid);
  var args = new SessionService_removeAllBut_args();
  args.ssoToken = ssoToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeAllBut();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SessionServiceClient.prototype.recv_removeAllBut = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionService_removeAllBut_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  return;
};
SessionServiceClient.prototype.getUserFor = function(ssoToken, callback) {
  this.send_getUserFor(ssoToken, callback); 
  if (!callback) {
    return this.recv_getUserFor();
  }
};

SessionServiceClient.prototype.send_getUserFor = function(ssoToken, callback) {
  this.output.writeMessageBegin('getUserFor', Thrift.MessageType.CALL, this.seqid);
  var args = new SessionService_getUserFor_args();
  args.ssoToken = ssoToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getUserFor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

SessionServiceClient.prototype.recv_getUserFor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionService_getUserFor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserFor failed: unknown result';
};
