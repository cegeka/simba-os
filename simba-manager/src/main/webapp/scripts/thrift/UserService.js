//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

UserService_addRoles_args = function(args) {
  this.user = null;
  this.roles = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [TRole]);
    }
  }
};
UserService_addRoles_args.prototype = {};
UserService_addRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size86 = 0;
        var _rtmp390;
        this.roles = [];
        var _etype89 = 0;
        _rtmp390 = input.readSetBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new TRole();
          elem92.read(input);
          this.roles.push(elem92);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_addRoles_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_addRoles_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.roles.length);
    for (var iter93 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter93))
      {
        iter93 = this.roles[iter93];
        iter93.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_addRoles_result = function(args) {
};
UserService_addRoles_result.prototype = {};
UserService_addRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_addRoles_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_addRoles_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_create_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_create_args.prototype = {};
UserService_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_create_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_create_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_create_result = function(args) {
  this.success = null;
  this.simbaError = null;
  if (args instanceof TSimbaError) {
    this.simbaError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
    if (args.simbaError !== undefined && args.simbaError !== null) {
      this.simbaError = args.simbaError;
    }
  }
};
UserService_create_result.prototype = {};
UserService_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.simbaError = new TSimbaError();
        this.simbaError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_create_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_create_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.simbaError !== null && this.simbaError !== undefined) {
    output.writeFieldBegin('simbaError', Thrift.Type.STRUCT, 1);
    this.simbaError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_createWithRoles_args = function(args) {
  this.user = null;
  this.roleNames = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
    if (args.roleNames !== undefined && args.roleNames !== null) {
      this.roleNames = Thrift.copyList(args.roleNames, [null]);
    }
  }
};
UserService_createWithRoles_args.prototype = {};
UserService_createWithRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.roleNames = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = input.readString().value;
          this.roleNames.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_createWithRoles_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_createWithRoles_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.roleNames !== null && this.roleNames !== undefined) {
    output.writeFieldBegin('roleNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.roleNames.length);
    for (var iter101 in this.roleNames)
    {
      if (this.roleNames.hasOwnProperty(iter101))
      {
        iter101 = this.roleNames[iter101];
        output.writeString(iter101);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_createWithRoles_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
  }
};
UserService_createWithRoles_result.prototype = {};
UserService_createWithRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_createWithRoles_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_createWithRoles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_cloneUser_args = function(args) {
  this.user = null;
  this.clonedUsername = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
    if (args.clonedUsername !== undefined && args.clonedUsername !== null) {
      this.clonedUsername = args.clonedUsername;
    }
  }
};
UserService_cloneUser_args.prototype = {};
UserService_cloneUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clonedUsername = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_cloneUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_cloneUser_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.clonedUsername !== null && this.clonedUsername !== undefined) {
    output.writeFieldBegin('clonedUsername', Thrift.Type.STRING, 2);
    output.writeString(this.clonedUsername);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_cloneUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
  }
};
UserService_cloneUser_result.prototype = {};
UserService_cloneUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_cloneUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_cloneUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_createRestUser_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
UserService_createRestUser_args.prototype = {};
UserService_createRestUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_createRestUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_createRestUser_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_createRestUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
UserService_createRestUser_result.prototype = {};
UserService_createRestUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_createRestUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_createRestUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findByRole_args = function(args) {
  this.role = null;
  if (args) {
    if (args.role !== undefined && args.role !== null) {
      this.role = new TRole(args.role);
    }
  }
};
UserService_findByRole_args.prototype = {};
UserService_findByRole_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.role = new TRole();
        this.role.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findByRole_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findByRole_args');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 1);
    this.role.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findByRole_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TUser]);
    }
  }
};
UserService_findByRole_result.prototype = {};
UserService_findByRole_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.success = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = new TUser();
          elem108.read(input);
          this.success.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findByRole_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findByRole_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter109 in this.success)
    {
      if (this.success.hasOwnProperty(iter109))
      {
        iter109 = this.success[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findAll_args = function(args) {
};
UserService_findAll_args.prototype = {};
UserService_findAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findAll_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TUser]);
    }
  }
};
UserService_findAll_result.prototype = {};
UserService_findAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.success = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = new TUser();
          elem116.read(input);
          this.success.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findAll_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter117 in this.success)
    {
      if (this.success.hasOwnProperty(iter117))
      {
        iter117 = this.success[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findGroups_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_findGroups_args.prototype = {};
UserService_findGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findGroups_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findGroups_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TGroup]);
    }
  }
};
UserService_findGroups_result.prototype = {};
UserService_findGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.success = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = new TGroup();
          elem124.read(input);
          this.success.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter125 in this.success)
    {
      if (this.success.hasOwnProperty(iter125))
      {
        iter125 = this.success[iter125];
        iter125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findPolicies_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_findPolicies_args.prototype = {};
UserService_findPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findPolicies_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findPolicies_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TPolicy]);
    }
  }
};
UserService_findPolicies_result.prototype = {};
UserService_findPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.success = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = new TPolicy();
          elem132.read(input);
          this.success.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter133 in this.success)
    {
      if (this.success.hasOwnProperty(iter133))
      {
        iter133 = this.success[iter133];
        iter133.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findRoles_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_findRoles_args.prototype = {};
UserService_findRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findRoles_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findRoles_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findRoles_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TRole]);
    }
  }
};
UserService_findRoles_result.prototype = {};
UserService_findRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size134 = 0;
        var _rtmp3138;
        this.success = [];
        var _etype137 = 0;
        _rtmp3138 = input.readListBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = new TRole();
          elem140.read(input);
          this.success.push(elem140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findRoles_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findRoles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter141 in this.success)
    {
      if (this.success.hasOwnProperty(iter141))
      {
        iter141 = this.success[iter141];
        iter141.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findRolesNotLinked_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_findRolesNotLinked_args.prototype = {};
UserService_findRolesNotLinked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findRolesNotLinked_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findRolesNotLinked_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findRolesNotLinked_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TRole]);
    }
  }
};
UserService_findRolesNotLinked_result.prototype = {};
UserService_findRolesNotLinked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.success = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = new TRole();
          elem148.read(input);
          this.success.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findRolesNotLinked_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findRolesNotLinked_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter149 in this.success)
    {
      if (this.success.hasOwnProperty(iter149))
      {
        iter149 = this.success[iter149];
        iter149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_refresh_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_refresh_args.prototype = {};
UserService_refresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_refresh_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_refresh_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_refresh_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
  }
};
UserService_refresh_result.prototype = {};
UserService_refresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_refresh_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_refresh_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_removeRole_args = function(args) {
  this.user = null;
  this.role = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = new TRole(args.role);
    }
  }
};
UserService_removeRole_args.prototype = {};
UserService_removeRole_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.role = new TRole();
        this.role.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_removeRole_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_removeRole_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 2);
    this.role.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_removeRole_result = function(args) {
};
UserService_removeRole_result.prototype = {};
UserService_removeRole_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_removeRole_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_removeRole_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_resetPassword_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_resetPassword_args.prototype = {};
UserService_resetPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_resetPassword_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_resetPassword_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_resetPassword_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
  }
};
UserService_resetPassword_result.prototype = {};
UserService_resetPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_resetPassword_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_resetPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_search_args = function(args) {
  this.searchText = null;
  if (args) {
    if (args.searchText !== undefined && args.searchText !== null) {
      this.searchText = args.searchText;
    }
  }
};
UserService_search_args.prototype = {};
UserService_search_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.searchText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_search_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_search_args');
  if (this.searchText !== null && this.searchText !== undefined) {
    output.writeFieldBegin('searchText', Thrift.Type.STRING, 1);
    output.writeString(this.searchText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_search_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TUser]);
    }
  }
};
UserService_search_result.prototype = {};
UserService_search_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.success = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = new TUser();
          elem156.read(input);
          this.success.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_search_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_search_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter157 in this.success)
    {
      if (this.success.hasOwnProperty(iter157))
      {
        iter157 = this.success[iter157];
        iter157.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_update_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new TUser(args.user);
    }
  }
};
UserService_update_args.prototype = {};
UserService_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_update_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_update_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_update_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TUser(args.success);
    }
  }
};
UserService_update_result.prototype = {};
UserService_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_update_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_update_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.addRoles = function(user, roles, callback) {
  this.send_addRoles(user, roles, callback); 
  if (!callback) {
  this.recv_addRoles();
  }
};

UserServiceClient.prototype.send_addRoles = function(user, roles, callback) {
  this.output.writeMessageBegin('addRoles', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_addRoles_args();
  args.user = user;
  args.roles = roles;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addRoles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_addRoles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_addRoles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
UserServiceClient.prototype.create = function(user, callback) {
  this.send_create(user, callback); 
  if (!callback) {
    return this.recv_create();
  }
};

UserServiceClient.prototype.send_create = function(user, callback) {
  this.output.writeMessageBegin('create', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_create_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_create = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_create_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.simbaError) {
    throw result.simbaError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create failed: unknown result';
};
UserServiceClient.prototype.createWithRoles = function(user, roleNames, callback) {
  this.send_createWithRoles(user, roleNames, callback); 
  if (!callback) {
    return this.recv_createWithRoles();
  }
};

UserServiceClient.prototype.send_createWithRoles = function(user, roleNames, callback) {
  this.output.writeMessageBegin('createWithRoles', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_createWithRoles_args();
  args.user = user;
  args.roleNames = roleNames;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createWithRoles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_createWithRoles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_createWithRoles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createWithRoles failed: unknown result';
};
UserServiceClient.prototype.cloneUser = function(user, clonedUsername, callback) {
  this.send_cloneUser(user, clonedUsername, callback); 
  if (!callback) {
    return this.recv_cloneUser();
  }
};

UserServiceClient.prototype.send_cloneUser = function(user, clonedUsername, callback) {
  this.output.writeMessageBegin('cloneUser', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_cloneUser_args();
  args.user = user;
  args.clonedUsername = clonedUsername;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_cloneUser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_cloneUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_cloneUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'cloneUser failed: unknown result';
};
UserServiceClient.prototype.createRestUser = function(username, callback) {
  this.send_createRestUser(username, callback); 
  if (!callback) {
    return this.recv_createRestUser();
  }
};

UserServiceClient.prototype.send_createRestUser = function(username, callback) {
  this.output.writeMessageBegin('createRestUser', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_createRestUser_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createRestUser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_createRestUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_createRestUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createRestUser failed: unknown result';
};
UserServiceClient.prototype.findByRole = function(role, callback) {
  this.send_findByRole(role, callback); 
  if (!callback) {
    return this.recv_findByRole();
  }
};

UserServiceClient.prototype.send_findByRole = function(role, callback) {
  this.output.writeMessageBegin('findByRole', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_findByRole_args();
  args.role = role;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findByRole();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_findByRole = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_findByRole_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findByRole failed: unknown result';
};
UserServiceClient.prototype.findAll = function(callback) {
  this.send_findAll(callback); 
  if (!callback) {
    return this.recv_findAll();
  }
};

UserServiceClient.prototype.send_findAll = function(callback) {
  this.output.writeMessageBegin('findAll', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_findAll_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findAll();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_findAll = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_findAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findAll failed: unknown result';
};
UserServiceClient.prototype.findGroups = function(user, callback) {
  this.send_findGroups(user, callback); 
  if (!callback) {
    return this.recv_findGroups();
  }
};

UserServiceClient.prototype.send_findGroups = function(user, callback) {
  this.output.writeMessageBegin('findGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_findGroups_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findGroups();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_findGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_findGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findGroups failed: unknown result';
};
UserServiceClient.prototype.findPolicies = function(user, callback) {
  this.send_findPolicies(user, callback); 
  if (!callback) {
    return this.recv_findPolicies();
  }
};

UserServiceClient.prototype.send_findPolicies = function(user, callback) {
  this.output.writeMessageBegin('findPolicies', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_findPolicies_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findPolicies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_findPolicies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_findPolicies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findPolicies failed: unknown result';
};
UserServiceClient.prototype.findRoles = function(user, callback) {
  this.send_findRoles(user, callback); 
  if (!callback) {
    return this.recv_findRoles();
  }
};

UserServiceClient.prototype.send_findRoles = function(user, callback) {
  this.output.writeMessageBegin('findRoles', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_findRoles_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findRoles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_findRoles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_findRoles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findRoles failed: unknown result';
};
UserServiceClient.prototype.findRolesNotLinked = function(user, callback) {
  this.send_findRolesNotLinked(user, callback); 
  if (!callback) {
    return this.recv_findRolesNotLinked();
  }
};

UserServiceClient.prototype.send_findRolesNotLinked = function(user, callback) {
  this.output.writeMessageBegin('findRolesNotLinked', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_findRolesNotLinked_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findRolesNotLinked();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_findRolesNotLinked = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_findRolesNotLinked_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findRolesNotLinked failed: unknown result';
};
UserServiceClient.prototype.refresh = function(user, callback) {
  this.send_refresh(user, callback); 
  if (!callback) {
    return this.recv_refresh();
  }
};

UserServiceClient.prototype.send_refresh = function(user, callback) {
  this.output.writeMessageBegin('refresh', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_refresh_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_refresh();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_refresh = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_refresh_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'refresh failed: unknown result';
};
UserServiceClient.prototype.removeRole = function(user, role, callback) {
  this.send_removeRole(user, role, callback); 
  if (!callback) {
  this.recv_removeRole();
  }
};

UserServiceClient.prototype.send_removeRole = function(user, role, callback) {
  this.output.writeMessageBegin('removeRole', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_removeRole_args();
  args.user = user;
  args.role = role;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeRole();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_removeRole = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_removeRole_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
UserServiceClient.prototype.resetPassword = function(user, callback) {
  this.send_resetPassword(user, callback); 
  if (!callback) {
    return this.recv_resetPassword();
  }
};

UserServiceClient.prototype.send_resetPassword = function(user, callback) {
  this.output.writeMessageBegin('resetPassword', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_resetPassword_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resetPassword();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_resetPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_resetPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'resetPassword failed: unknown result';
};
UserServiceClient.prototype.search = function(searchText, callback) {
  this.send_search(searchText, callback); 
  if (!callback) {
    return this.recv_search();
  }
};

UserServiceClient.prototype.send_search = function(searchText, callback) {
  this.output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_search_args();
  args.searchText = searchText;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_search();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_search = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_search_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'search failed: unknown result';
};
UserServiceClient.prototype.update = function(user, callback) {
  this.send_update(user, callback); 
  if (!callback) {
    return this.recv_update();
  }
};

UserServiceClient.prototype.send_update = function(user, callback) {
  this.output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_update_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_update();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

UserServiceClient.prototype.recv_update = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_update_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'update failed: unknown result';
};
